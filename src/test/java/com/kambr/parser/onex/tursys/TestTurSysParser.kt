package com.kambr.parser.onex.tursys

import com.ibm.icu.impl.Assert
import com.kambr.kambrlogger.Logger
import org.antlr.v4.runtime.CharStream
import org.antlr.v4.runtime.CharStreams
import org.junit.jupiter.api.Test
import java.io.IOException

class TestTurSysParser {

    companion object {
        const val FILE_PATH = "src/test/resources/tursys/test-file.csv"
        val logger = Logger(this::class.java)
    }

    @Test
    fun test_tursys_parser() {
        var charStream: CharStream? = null
        try {
            charStream = CharStreams.fromFileName(FILE_PATH)
        } catch (e: IOException) {
            logger.error(e.localizedMessage)
        }
        val tursys = TursysParser.parse(charStream!!)

        // Record 1
        Assert.assrt(tursys[0].segments.size == 1)
        Assert.assrt(tursys[0].segments[0].departureDate.toString() == "2020-10-20")
        Assert.assrt(tursys[0].segments[0].carrierCode == "CXI")
        Assert.assrt(tursys[0].segments[0].flightNumber == "1010")
        Assert.assrt(tursys[0].segments[0].origin == "CGN")
        Assert.assrt(tursys[0].segments[0].destination == "HRG")
        Assert.assrt(tursys[0].segments[0].flightPath == "CGN-HRG")
        Assert.assrt(tursys[0].segments[0].cabinCode == "Y")
        Assert.assrt(tursys[0].segments[0].seatAssignment == null)
        Assert.assrt(tursys[0].segments[0].liftStatus == null)
        Assert.assrt(tursys[0].segments[0].boardingSequence == null)
        Assert.assrt(tursys[0].pnr == "HBQ38Y")
        Assert.assrt(tursys[0].couponIdentificationCode == "1656015")
        Assert.assrt(tursys[0].fareBasisCode == "FLEX")
        Assert.assrt(tursys[0].bookingTypeCode.value == 3)
        Assert.assrt(tursys[0].bookingStatusCode.value == "HK")
        Assert.assrt(tursys[0].bookingDate.toString() == "2020-10-21")
        Assert.assrt(tursys[0].bookingTime.toString() == "13:00")
        Assert.assrt(tursys[0].ticketingDate.toString() == "2020-10-21")
        Assert.assrt(tursys[0].ticketingTime.toString() == "14:27:24")
        Assert.assrt(tursys[0].cancellationDate == null)
        Assert.assrt(tursys[0].agentCode == "2")
        Assert.assrt(tursys[0].salesSource == "BO")
        Assert.assrt(tursys[0].passengerType.value == "CHD")
        Assert.assrt(tursys[0].currency == "EUR")
        Assert.assrt(tursys[0].rateOfExchange == 1.toBigDecimal())
        Assert.assrt(tursys[0].spoBasePrice == 180.toBigDecimal())
        Assert.assrt(!tursys[0].promoIdentifier)
        Assert.assrt(tursys[0].discount == 0.toBigDecimal())
        Assert.assrt(tursys[0].dynamicPriceAdjustment == 0.toBigDecimal())
        Assert.assrt(!tursys[0].priceAdjustmentApplied)
        Assert.assrt(tursys[0].salesPrice == 138.3.toBigDecimal())
        Assert.assrt(tursys[0].tax == 20.11.toBigDecimal())
        Assert.assrt(tursys[0].totalAmount == 158.41.toBigDecimal())

        // Record 2
        Assert.assrt(tursys[1].segments.size == 2)
        Assert.assrt(tursys[1].segments[0].departureDate.toString() == "2020-10-20")
        Assert.assrt(tursys[1].segments[0].carrierCode == "CXI")
        Assert.assrt(tursys[1].segments[0].flightNumber == "1010")
        Assert.assrt(tursys[1].segments[0].origin == "CGN")
        Assert.assrt(tursys[1].segments[0].destination == "HRG")
        Assert.assrt(tursys[1].segments[0].flightPath == "CGN-HRG-AMS")
        Assert.assrt(tursys[1].segments[0].cabinCode == "Y")
        Assert.assrt(tursys[1].segments[0].seatAssignment == null)
        Assert.assrt(tursys[1].segments[0].liftStatus == null)
        Assert.assrt(tursys[1].segments[0].boardingSequence == 0)
        Assert.assrt(tursys[1].segments[1].departureDate.toString() == "2020-10-20")
        Assert.assrt(tursys[1].segments[1].carrierCode == "CXI")
        Assert.assrt(tursys[1].segments[1].flightNumber == "1010")
        Assert.assrt(tursys[1].segments[1].origin == "HRG")
        Assert.assrt(tursys[1].segments[1].destination == "AMS")
        Assert.assrt(tursys[1].segments[1].flightPath == "CGN-HRG-AMS")
        Assert.assrt(tursys[1].segments[1].cabinCode == "Y")
        Assert.assrt(tursys[1].segments[1].seatAssignment == null)
        Assert.assrt(tursys[1].segments[1].liftStatus == null)
        Assert.assrt(tursys[1].segments[1].boardingSequence == 0)
        Assert.assrt(tursys[1].pnr == "HBQ38Y")
        Assert.assrt(tursys[1].couponIdentificationCode == "1656015")
        Assert.assrt(tursys[1].fareBasisCode == "FLEX")
        Assert.assrt(tursys[1].bookingTypeCode.value == 3)
        Assert.assrt(tursys[1].bookingStatusCode.value == "HK")
        Assert.assrt(tursys[1].bookingDate.toString() == "2020-10-21")
        Assert.assrt(tursys[1].bookingTime.toString() == "13:00")
        Assert.assrt(tursys[1].ticketingDate.toString() == "2020-10-21")
        Assert.assrt(tursys[1].ticketingTime.toString() == "14:27:24")
        Assert.assrt(tursys[1].cancellationDate == null)
        Assert.assrt(tursys[1].agentCode == "2")
        Assert.assrt(tursys[1].salesSource == "BO")
        Assert.assrt(tursys[1].passengerType.value == "CHD")
        Assert.assrt(tursys[1].currency == "EUR")
        Assert.assrt(tursys[1].rateOfExchange == 1.toBigDecimal())
        Assert.assrt(tursys[1].spoBasePrice == 180.toBigDecimal())
        Assert.assrt(!tursys[1].promoIdentifier)
        Assert.assrt(tursys[1].discount == 0.toBigDecimal())
        Assert.assrt(tursys[1].dynamicPriceAdjustment == 0.toBigDecimal())
        Assert.assrt(!tursys[1].priceAdjustmentApplied)
        Assert.assrt(tursys[1].salesPrice == 138.3.toBigDecimal())
        Assert.assrt(tursys[1].tax == 20.11.toBigDecimal())
        Assert.assrt(tursys[1].totalAmount == 158.41.toBigDecimal())

        // Record 3
        Assert.assrt(tursys[2].segments.size == 3)
        Assert.assrt(tursys[2].segments[0].departureDate.toString() == "2020-10-20")
        Assert.assrt(tursys[2].segments[0].carrierCode == "CXI")
        Assert.assrt(tursys[2].segments[0].flightNumber == "1010")
        Assert.assrt(tursys[2].segments[0].origin == "CGN")
        Assert.assrt(tursys[2].segments[0].destination == "HRG")
        Assert.assrt(tursys[2].segments[0].flightPath == "CGN-HRG-AMS-FRA")
        Assert.assrt(tursys[2].segments[0].cabinCode == "Y")
        Assert.assrt(tursys[2].segments[0].seatAssignment == null)
        Assert.assrt(tursys[2].segments[0].liftStatus == null)
        Assert.assrt(tursys[2].segments[0].boardingSequence == 0)
        Assert.assrt(tursys[2].segments[1].departureDate.toString() == "2020-10-21")
        Assert.assrt(tursys[2].segments[1].carrierCode == "CXI")
        Assert.assrt(tursys[2].segments[1].flightNumber == "1011")
        Assert.assrt(tursys[2].segments[1].origin == "HRG")
        Assert.assrt(tursys[2].segments[1].destination == "AMS")
        Assert.assrt(tursys[2].segments[1].flightPath == "CGN-HRG-AMS-FRA")
        Assert.assrt(tursys[2].segments[1].cabinCode == "C")
        Assert.assrt(tursys[2].segments[1].seatAssignment == "A12")
        Assert.assrt(tursys[2].segments[1].liftStatus?.name == "BOARDED")
        Assert.assrt(tursys[2].segments[1].boardingSequence == 3)
        Assert.assrt(tursys[2].segments[2].departureDate.toString() == "2020-10-22")
        Assert.assrt(tursys[2].segments[2].carrierCode == "CXI")
        Assert.assrt(tursys[2].segments[2].flightNumber == "1012")
        Assert.assrt(tursys[2].segments[2].origin == "AMS")
        Assert.assrt(tursys[2].segments[2].destination == "FRA")
        Assert.assrt(tursys[2].segments[2].flightPath == "CGN-HRG-AMS-FRA")
        Assert.assrt(tursys[2].segments[2].cabinCode == "C")
        Assert.assrt(tursys[2].segments[2].seatAssignment == "B2")
        Assert.assrt(tursys[2].segments[2].liftStatus?.name == "NO_SHOW")
        Assert.assrt(tursys[2].segments[2].boardingSequence == 4)
        Assert.assrt(tursys[2].pnr == "F36MU1")
        Assert.assrt(tursys[2].couponIdentificationCode == "1508679")
        Assert.assrt(tursys[2].fareBasisCode == "NEGO")
        Assert.assrt(tursys[2].bookingTypeCode.value == 2)
        Assert.assrt(tursys[2].bookingStatusCode.value == "WL")
        Assert.assrt(tursys[2].bookingDate.toString() == "2020-08-08")
        Assert.assrt(tursys[2].bookingTime.toString() == "19:33:08")
        Assert.assrt(tursys[2].ticketingDate.toString() == "2020-08-08")
        Assert.assrt(tursys[2].ticketingTime.toString() == "09:33:09")
        Assert.assrt(tursys[2].cancellationDate?.toString() == "2020-08-07")
        Assert.assrt(tursys[2].agentCode == "196")
        Assert.assrt(tursys[2].salesSource == "API")
        Assert.assrt(tursys[2].passengerType.value == "ADT")
        Assert.assrt(tursys[2].currency == "EUR")
        Assert.assrt(tursys[2].rateOfExchange == 0.8.toBigDecimal())
        Assert.assrt(tursys[2].spoBasePrice == 180.9.toBigDecimal())
        Assert.assrt(tursys[2].promoIdentifier)
        Assert.assrt(tursys[2].discount == 7.7.toBigDecimal())
        Assert.assrt(tursys[2].dynamicPriceAdjustment == 99.8.toBigDecimal())
        Assert.assrt(tursys[2].priceAdjustmentApplied)
        Assert.assrt(tursys[2].salesPrice == 172.88.toBigDecimal())
        Assert.assrt(tursys[2].tax == 20.11.toBigDecimal())
        Assert.assrt(tursys[2].totalAmount == 192.99.toBigDecimal())
    }
}